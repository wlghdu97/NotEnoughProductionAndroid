// Top-level build file where you can add configuration options common to all sub-projects/modules.
import io.gitlab.arturbosch.detekt.Detekt

buildscript {
    ext {
        kotlin_version = "1.6.0"
        coroutine_version = "1.5.2-native-mt"
        serialization_version = "1.3.0"

        lifecycle_version = "2.2.0-rc03"
        recyclerview_version = "1.1.0"
        paging_version = "3.0.1"
        preference_version = "1.1.0"
        dagger_version = "2.24"
        live_event_version = "1.2.0"
        material_version = "1.2.0-alpha03"
        material_progress_bar_version = "1.6.1"
        glide_version = "4.10.0"
        gson_version = "2.8.6"
        timber_version = "4.7.1"
        math_version = "3.6.1"

        firebase_core_version = "17.5.0"
        firebase_analytics_version = "18.0.0"
        crashlytics_version = "17.2.1"

        junit_version = "4.12"
        core_testing_version = "1.4.0"
        mockito_version = "4.0.0"
        mockito_kotlin_version = "2.2.0"
        coroutine_test_version = "1.3.2"
        test_fragment_version = "1.1.0-rc04"
        test_runner_version = "1.4.0"
        test_junit_version = "1.1.3"
        espresso_version = "3.4.0"
        awaitibility_version = "3.1.6"
        test_rules_version = "1.4.0"
        test_orchestrator_version = "1.4.0"

        resources_version = "0.17.2"
        mobile_infrastructure_version = "0.5.0"
        sqldelight_version = "1.5.2"
        kermit_version = "1.0.0-rc4"
        stately_version = "1.1.10"

        detekt_version = "1.17.1"
        jacoco_version = "0.8.1"
        jacocoEnabled = System.getProperty("jacocoEnabled") ?: "false"

        google_services_version = "4.3.3"
        crashlytics_gradle_version = '2.5.2'
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jacoco:org.jacoco.core:$jacoco_version"
        classpath "com.google.gms:google-services:$google_services_version"
        classpath "com.google.firebase:firebase-crashlytics-gradle:$crashlytics_gradle_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath "com.squareup.sqldelight:gradle-plugin:$sqldelight_version"
        classpath "dev.icerock.moko:resources-generator:$resources_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'io.gitlab.arturbosch.detekt'

tasks.register("detektAll", Detekt) {
    description = "Runs detekt for all modules."
    setSource(file(projectDir))

    buildUponDefaultConfig = true
    allRules = false
    autoCorrect = true
    config.setFrom(files("$rootDir/detekt-config.yml"))
    reports {
        html.enabled = true
        xml.enabled = false
        txt.enabled = false
    }

    include '**/*.kt'
    include '**/*.kts'
    exclude 'resources/'
    exclude 'build/'
}

tasks.detekt.jvmTarget = "1.8"

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
}

apply plugin: 'jacoco'

task jacocoRootReport(type: JacocoReport, dependsOn: [
        'app:jacocoTestReport',
        'shared:jacocoTestReport'
]) {
    if (!tasks.findByPath("app:jacocoTestReport") || !tasks.findByPath("shared:jacocoTestReport")) {
        return
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getSourceDirectories().setFrom(
            files([tasks.getByPath("app:jacocoTestReport").sourceDirectories,
                   tasks.getByPath("shared:jacocoTestReport").sourceDirectories])
    )

    getClassDirectories().setFrom(
            files([tasks.getByPath("app:jacocoTestReport").classDirectories,
                   tasks.getByPath("shared:jacocoTestReport").classDirectories])
    )

    getExecutionData().setFrom(
            files([tasks.getByPath("app:jacocoTestReport").executionData,
                   tasks.getByPath("shared:jacocoTestReport").executionData])
    )
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
